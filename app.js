const express = require("express");
const app = express();
const dotenv = require("dotenv");
const mongoose = require("mongoose");
const TodoTask = require("./models/ToDoTask"); // sets up collections for data to mongodb
validateForm => {
  let x = document.forms["todo-header"]["fname"].value;
  if (x == "") {
    alert("Must be filled out");
    return false;
  }
}
dotenv.config();
app.use("/static", express.static("public")); // sets public folder to static/"non changing"
//Connecting to MONGODB with Mongoose.
mongoose.connect(process.env.DB_CONNECT, () => {
  console.log("Connected to MongoDB!");
  app.listen(3000, () => console.log("Server Up and running on port 3000"));
});
// GET METHOD
app.get("/", (req, res) => {
  TodoTask.find({}, (err, tasks) => {
    res.render("todo.ejs", { todoTasks: tasks }); // todotasks: tasks allows data to be read from clientside.
    console.log("loaded");
  });
});
// renders page as home.ejs and allows data to be read by client side
app.set("view engine", "ejs"); // sets up view engine(ejs)
app.use(express.urlencoded({ extended: true })); // middleware that helps recognize incoming requests.
// extended:true allows it to read objects/constructors, etc.
// POST METHOD
// Post method is async so you wont have to wait on other things/function runs without interruption
// Once you send the request (press enter to submit new task)
// a new object named todoTask is created and the user input is imported
// as data for "content" into the DB.
app.post("/", async (req, res) => {
  const todoTask = new TodoTask({
    // object/constructor used for data
    content: req.body.content, // user input
  });
  try {
    await todoTask.save(); // built in mongoose function to save to DB using await makes this asynchronous.
    res.redirect("/");
  } catch (err) {
    res.redirect("/");
  }
});
//UPDATE
// IDS ARE AUTOMATICALLY GENERATED BY MONGOOSE AND IMPORTED INTO THE DB.
// IT USES BUILT IN MONGOOSE FUNCTION TO FIND THE TASK BY ITS ID AND UPDATE IT IN THE DATABASE
// WITH THE USERS INPUT.
app
  .route("/edit/:id")
  .get((req, res) => {
    const id = req.params.id; // grabs id that was automatically created by mongoose for the specific task and sets it for the const "id"
    TodoTask.find({}, (err, tasks) => {
      res.render("todoedit.ejs", { todoTasks: tasks, idTask: id }); // sets values and allows clientside to read/write data through ejs
    });
  })
  .post((req, res) => {
    const id = req.params.id; // sets a const of id to the id of the request(which ever task you clicked on that activated this method).
    TodoTask.findByIdAndUpdate(id, { content: req.body.content }, (err) => {
      // after finding id, updates content with user input
      if (err) return res.send(500, err);
      res.redirect("/");
    });
  });
//DELETE
// SAME WITH UPDATE METHOD, USES BUILT IN MONGOOSE FUNCTION TO FIND ITEMS BY ITS ID
// AND DELETE THEM FROM THE DB.
app.route("/remove/:id").get((req, res) => {
  const id = req.params.id; // sets a const of id to the id of the request(which ever task you clicked on that activated this method).
  TodoTask.findByIdAndRemove(id, (err) => {
    // finds id and deletes.
    if (err) return res.send(500, err);
    res.redirect("/");
  });
});
