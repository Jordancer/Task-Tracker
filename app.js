const express = require("express");
const app = express();
const dotenv = require("dotenv");
const mongoose = require("mongoose");
const TodoTask = require("./models/ToDoTask"); // sets up collections for data to mongodb

dotenv.config();
app.use("/static", express.static("public")); // sets public folder to static/"Wont Change"

//Connecting to MONGODB with Mongoose.

mongoose.connect(process.env.DB_CONNECT, () => {
  console.log("Connected to MongoDB!");
  app.listen(3000, () => console.log("Server Up and running on port 3000"));
});

// GET METHOD
app.get("/", (req, res) => {
  TodoTask.find({}, (err, tasks) => {
    res.render("todo.ejs", { todoTasks: tasks }); // todotasks: tasks allows data to be read from clientside.
    console.log("loaded");
  });
});

// renders page and lets data be read by client side
app.set("view engine", "ejs"); // sets up view engine(ejs)

app.use(express.urlencoded({ extended: true })); // middleware that helps recognize incoming requests..true lets it read to objects/constructors.

// POST METHOD
// Post is async so you wont have to wait on other tasks so it runs without interruption
// Once you send the request todoTask is created and the user input is imported.
app.post("/", async (req, res) => {
  const todoTask = new TodoTask({
    //Constructor used for data
    content: req.body.content, // user input
  });
  try {
    await todoTask.save(); // built in mongoose function to save to DB using await makes this asynchronous.
    res.redirect("/");
  } catch (err) {
    res.redirect("/");
  }
});

//UPDATE
// IDS ARE AUTOMATICALLY GENERATED BY MONGOOSE AND IMPORTED INTO THE DB.
// IT USES BUILT IN MONGOOSE FUNCTION TO FIND THE TASK BY  ID AND UPDATE IT IN THE DATABASE WITH THE USERS INPUT.
app
  .route("/edit/:id")
  .get((req, res) => {
    const id = req.params.id; // grabs id created by mongoose and sets it for the const "id"

    TodoTask.find({}, (err, tasks) => {
      res.render("todoedit.ejs", { todoTasks: tasks, idTask: id }); // sets values and allows clientside to read/write data through ejs
    });
  })

  .post((req, res) => {
    const id = req.params.id; // SETS A CONST OF ID TO WHICH EVER TASK YOU CLICKED ON THAT ACTIVATED THIS METHOD.
    TodoTask.findByIdAndUpdate(id, { content: req.body.content }, (err) => { // Finds id then updates content with user input
      if (err) return res.send(500, err);
      res.redirect("/");
    });
  });


//DELETE
// SAME As UPDATE METHOD, USES MONGOOSE TO FIND ITEMS BY ID AND DELETE THEM FROM THE DB.
app.route("/remove/:id").get((req, res) => {
  const id = req.params.id; // SETS A CONST OF ID TO THE ID OF THE REQUEST(WHICH EVER TASK YOU CLICKED THAT ACTIVATED THIS METHOD).
  TodoTask.findByIdAndRemove(id, (err) => {
    // finds id and deletes.
    if (err) return res.send(500, err);
    res.redirect("/");
  });
});
